{
  "name": "p2",
  "version": "0.6.1",
  "description": "A JavaScript 2D physics engine.",
  "author": {
    "name": "Stefan Hedman",
    "email": "schteppe@gmail.com",
    "url": "http://steffe.se"
  },
  "keywords": [
    "p2.js",
    "p2",
    "physics",
    "engine",
    "2d"
  ],
  "main": "./src/p2.js",
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/schteppe/p2.js.git"
  },
  "bugs": {
    "url": "https://github.com/schteppe/p2.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.9.2",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-watch": "~0.5.0",
    "grunt-browserify": "~2.0.1",
    "grunt-contrib-concat": "^0.4.0"
  },
  "dependencies": {
    "poly-decomp": "0.1.0"
  },
  "readme": "p2.js\n=====\n\n2D rigid body physics engine written in JavaScript. Includes collision detection, contacts, friction, restitution, motors, springs, advanced constraints and various shape types.\n\n[Demos](#demos) | [Examples](#examples) | [Documentation](http://schteppe.github.io/p2.js/docs/) | [Download](https://raw.github.com/schteppe/p2.js/master/build/p2.js) | [CDN](http://cdnjs.com/libraries/p2.js)\n\n### Featured projects using p2.js\n* [Google I/O 2015 Experiment](http://www.chromeexperiments.com/detail/io-2015-experiment) by Instrument\n* [PixiLights, a Christmas Experiment](http://christmasexperiments.com/experiments/11) by Mat Groves\n\n### Demos\nThese demos use the p2 Demo framework, which provides rendering and interactivity. Use mouse/touch to throw or create objects. Use the right menu (or console!) to tweak parameters. Or just check the source to see how to programmatically build the current scene using p2.\n\n* [Car](http://schteppe.github.io/p2.js/demos/car.html)\n* [Circle container](http://schteppe.github.io/p2.js/demos/circles.html)\n* [Collision tests](http://schteppe.github.io/p2.js/demos/collisions.html)\n* [Compound objects](http://schteppe.github.io/p2.js/demos/compound.html)\n* [Concave objects](http://schteppe.github.io/p2.js/demos/concave.html)\n* [Constraints](http://schteppe.github.io/p2.js/demos/constraints.html)\n* [DistanceConstraint](http://schteppe.github.io/p2.js/demos/distanceConstraint.html)\n* [Fixed rotation](http://schteppe.github.io/p2.js/demos/fixedRotation.html)\n* [Friction](http://schteppe.github.io/p2.js/demos/friction.html)\n* [Gear constraint](http://schteppe.github.io/p2.js/demos/gearConstraint.html)\n* [Heightfield](http://schteppe.github.io/p2.js/demos/heightfield.html)\n* [Island solver](http://schteppe.github.io/p2.js/demos/islandSolver.html)\n* [Kinematic body](http://schteppe.github.io/p2.js/demos/kinematic.html)\n* [Lock constraint](http://schteppe.github.io/p2.js/demos/lock.html)\n* [Piston](http://schteppe.github.io/p2.js/demos/piston.html)\n* [Prismatic constraint](http://schteppe.github.io/p2.js/demos/prismatic.html)\n* [Ragdoll](http://schteppe.github.io/p2.js/demos/ragdoll.html)\n* [Sensor](http://schteppe.github.io/p2.js/demos/removeSensor.html)\n* [Restitution](http://schteppe.github.io/p2.js/demos/restitution.html)\n* [Sleep](http://schteppe.github.io/p2.js/demos/sleep.html)\n* [Springs](http://schteppe.github.io/p2.js/demos/springs.html)\n* [Surface velocity](http://schteppe.github.io/p2.js/demos/surfaceVelocity.html)\n* [Suspension](http://schteppe.github.io/p2.js/demos/suspension.html)\n* [Tearable constraints](http://schteppe.github.io/p2.js/demos/tearable.html)\n\n### Examples\nExamples showing how to use p2.js with your favorite renderer.\n\n* [Canvas: Asteroids game](http://schteppe.github.io/p2.js/examples/canvas/asteroids.html)\n* [Canvas: Box on plane](http://schteppe.github.io/p2.js/examples/canvas/box.html)\n* [Canvas: Character demo](http://schteppe.github.io/p2.js/examples/canvas/character.html)\n* [Canvas: Circle on plane](http://schteppe.github.io/p2.js/examples/canvas/circle.html)\n* [Canvas: Interpolation](http://schteppe.github.io/p2.js/examples/canvas/interpolation.html)\n* [Canvas: Mousejoint](http://schteppe.github.io/p2.js/examples/canvas/mouseJoint.html)\n* [Canvas: Sensors](http://schteppe.github.io/p2.js/examples/canvas/sensors.html)\n* [Canvas: Sensors 2](http://schteppe.github.io/p2.js/examples/canvas/sensors2.html)\n* [Pixi.js: Box on plane](http://schteppe.github.io/p2.js/examples/pixijs/box.html)\n\n### Sample code\nThe following example uses the [World](http://schteppe.github.io/p2.js/docs/classes/World.html), [Circle](http://schteppe.github.io/p2.js/docs/classes/Circle.html), [Body](http://schteppe.github.io/p2.js/docs/classes/Body.html) and [Plane](http://schteppe.github.io/p2.js/docs/classes/Plane.html) classes to set up a simple physics scene with a ball on a plane.\n```js\n// Create a physics world, where bodies and constraints live\nvar world = new p2.World({\n    gravity:[0, -9.82]\n});\n\n// Create an empty dynamic body\nvar circleBody = new p2.Body({\n    mass: 5,\n    position: [0, 10]\n});\n\n// Add a circle shape to the body.\nvar radius = 1;\nvar circleShape = new p2.Circle(radius);\ncircleBody.addShape(circleShape);\n\n// ...and add the body to the world.\n// If we don't add it to the world, it won't be simulated.\nworld.addBody(circleBody);\n\n// Create an infinite ground plane.\nvar groundBody = new p2.Body({\n    mass: 0 // Setting mass to 0 makes the body static\n});\nvar groundShape = new p2.Plane();\ngroundBody.addShape(groundShape);\nworld.addBody(groundBody);\n\n// To get the trajectories of the bodies,\n// we must step the world forward in time.\n// This is done using a fixed time step size.\nvar timeStep = 1 / 60; // seconds\n\n// The \"Game loop\". Could be replaced by, for example, requestAnimationFrame.\nsetInterval(function(){\n\n    // The step method moves the bodies forward in time.\n    world.step(timeStep);\n\n    // Print the circle position to console.\n    // Could be replaced by a render call.\n    console.log(\"Circle y position: \" + circleBody.position[1]);\n\n}, 1000 * timeStep);\n```\n\n### Install\n##### Browser\nDownload either [p2.js](build/p2.js) or the minified [p2.min.js](build/p2.min.js) and include the script in your HTML:\n```html\n<script src=\"p2.js\" type=\"text/javascript\"></script>\n```\n\nIf you would like to use ordinary ```Array``` instead of ```Float32Array```, define ```GLMAT_ARRAY_TYPE``` globally before loading the library.\n\n```html\n<script type=\"text/javascript\">GLMAT_ARRAY_TYPE = Array;</script>\n<script src=\"p2.js\" type=\"text/javascript\"></script>\n```\n\n##### Node.js\n```\nnpm install p2\n```\nThen require it like so:\n```js\nvar p2 = require('p2');\n```\n\n### Supported collision pairs\n|                                                                              | Circle | Plane | Rectangle | Convex | Particle | Line   | Capsule | Heightfield | Ray    |\n| :--------------------------------------------------------------------------: |:------:|:-----:|:---------:|:------:|:--------:|:------:|:-------:|:-----------:|:------:|\n| [Circle](http://schteppe.github.io/p2.js/docs/classes/Circle.html)           | Yes    | -     | -         | -      | -        | -      | -       | -           | -      |\n| [Plane](http://schteppe.github.io/p2.js/docs/classes/Plane.html)             | Yes    | -     | -         | -      | -        | -      | -       | -           | -      |\n| [Rectangle](http://schteppe.github.io/p2.js/docs/classes/Rectangle.html)     | Yes    | Yes   | Yes       | -      | -        | -      | -       | -           | -      |\n| [Convex](http://schteppe.github.io/p2.js/docs/classes/Convex.html)           | Yes    | Yes   | Yes       | Yes    | -        | -      | -       | -           | -      |\n| [Particle](http://schteppe.github.io/p2.js/docs/classes/Particle.html)       | Yes    | Yes   | Yes       | Yes    | -        | -      | -       | -           | -      |\n| [Line](http://schteppe.github.io/p2.js/docs/classes/Line.html)               | Yes    | Yes   | (todo)    | (todo) | -        | (todo) | -       | -           | -      |\n| [Capsule](http://schteppe.github.io/p2.js/docs/classes/Capsule.html)         | Yes    | Yes   | Yes       | Yes    | Yes      | (todo) | Yes     | -           | -      |\n| [Heightfield](http://schteppe.github.io/p2.js/docs/classes/Heightfield.html) | Yes    | -     | Yes       | Yes    | (todo)   | (todo) | (todo)  | (todo)      | -      |\n| Ray                                                                          | Yes    | Yes   | Yes       | (todo) | -        | (todo) | (todo)  | (todo)      | -      |\n\nNote that concave polygon shapes can be created using [Body.fromPolygon](http://schteppe.github.io/p2.js/docs/classes/Body.html#method_fromPolygon).\n\n### Unit testing\nTests are written for [Nodeunit](https://github.com/caolan/nodeunit). Run the tests with the command ```grunt test```.\n\n### Contribute\nMake sure you have git, [Node.js](http://nodejs.org), NPM and [grunt](http://gruntjs.com/) installed.\n```\ngit clone https://github.com/schteppe/p2.js.git; # Clone the repo\ncd p2.js;\nnpm install;                                     # Install dependencies\n                                                 # (make changes to source)\ngrunt;                                           # Builds build/p2.js and build/p2.min.js\n```\nThe most recent commits are currently pushed to the ```master``` branch. Thanks for contributing!\n",
  "readmeFilename": "README.md",
  "_id": "p2@0.6.1",
  "dist": {
    "shasum": "6aa874ee613eb10330bded8d2fdb14322d102c6b"
  },
  "_from": "p2@",
  "_resolved": "https://registry.npmjs.org/p2/-/p2-0.6.1.tgz"
}
